plugins {
    id 'cpp'
    id 'google-test-test-suite'
}

apply from: 'plot.gradle'

model {
    binaries {
        all {
            if (!(toolChain instanceof Clang) && !targetPlatform.operatingSystem.windows)
                println "WARNING: Not using Clang. Additional warnings and sanitation may be missing."
            else if (toolChain instanceof Clang && targetPlatform.operatingSystem.windows)
                println "WARNING: Clang on windows is not supported. Please install MSVC"
        }
    }
    components {
        pathfinder(NativeLibrarySpec) {
            sources.cpp {
                source {
                    srcDir 'src/cpp'
                    include '**/*.cpp'
                }
                exportedHeaders {
                    srcDir 'src/include'
                    include '**/*.h'
                }
                lib project: ':libs', library: "eigen", linkage: "api"
            }
        }
    }
    testSuites {
        if (project.hasProperty('withBench')) {
            pathfinderBench(GoogleTestTestSuiteSpec) {
                testing $.components.pathfinder 

                binaries.all {
                    if (toolChain instanceof Gcc || toolChain instanceof Clang) {
                        linker.args << '-pthread'
                    } else {
                        // MSVC
                        linker.args << 'shlwapi.lib'
                    }
                }

                sources.cpp {
                    source {
                        srcDir 'src/bench'
                        include '**/*.cpp'
                    }
                    lib project: ':libs', library: 'googleBench', linkage: 'static'
                    lib project: ':libs', library: 'eigen', linkage: 'api'
                }
            }
        }

        pathfinderTest(GoogleTestTestSuiteSpec) {
            testing $.components.pathfinder
            
            binaries.all {
                cppCompiler.define 'EIGEN_RUNTIME_NO_MALLOC'
                if (toolChain instanceof Gcc || toolChain instanceof Clang) {
                    linker.args << '-pthread'

                    if (toolChain instanceof Clang) {
                        cppCompiler.args << '-fsanitize=address'
                        linker.args << '-fsanitize=address'
                    }
                } else {
                    // Windows breaks Eigen's static alignment. Seems to be a compiler bug.
                    // https://forum.kde.org/viewtopic.php?f=74&t=97995&sid=cd769a78f5b8b159239b9f032e2b7432
                    cppCompiler.define 'EIGEN_DONT_ALIGN_STATICALLY'
                }
            }

            sources.cpp {
                source {
                    srcDir 'src/test'
                    include '**/*.cpp'
                }
                exportedHeaders {
                    srcDir 'src/test'
                    include '**/*.h'
                }
                lib project: ':libs', library: "eigen", linkage: "api"
            }
        }
    }
}

task cleanTestTask() {
    doLast {
        delete {
            delete fileTree(dir: new File(project.buildDir, "test-results"), include: ["**/*.png", "**/*.csv"])
        }
    }
}

assemble.finalizedBy cleanTestTask
check.mustRunAfter cleanTestTask
check.finalizedBy plot