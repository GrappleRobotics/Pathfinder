plugins {
    id "com.dorongold.task-tree" version "1.3"
}

apply from: 'defaults.gradle'
apply from: 'libs.gradle'
apply from: 'plot.gradle'

apply plugin: 'cpp'
apply plugin: 'google-test-test-suite'
apply plugin: 'visual-studio'

model {
    toolChains {
        // Define Clang first - for ASAN
        clang(Clang)
        gcc(Gcc)
    }
    binaries{
        all {
            if (!(toolChain instanceof Clang))
                println "WARNING: Not using Clang. Additional warnings and sanitation may be missing."
            
            if (toolChain instanceof Gcc || toolChain instanceof Clang) {
                cppCompiler.args << '-std=c++14' << '-g' << '-O2' << '-Werror' << '-DEXCLUDE_CDT'
            } else {
                // MSVC
                cppCompiler.args << '/std:c++14'
                cppCompiler.args << '/DEBUG' << '/O2'
            }
        }
    }
    components {
        kinematics(NativeLibrarySpec) {
            sources.cpp {
                source {
                    srcDir 'src/cpp'
                    include '**/*.cpp'
                }
                exportedHeaders {
                    srcDir 'src/include'
                    include '**/*.h'
                }
                lib project: ':libs', library: "eigen", linkage: "api"
            }
        }
    }
    testSuites {
        kinematicsTest(GoogleTestTestSuiteSpec) {
            testing $.components.kinematics
            
            binaries.all {
                if (toolChain instanceof Gcc || toolChain instanceof Clang) {
                    linker.args << '-pthread'

                    if (toolChain instanceof Clang) {
                        cppCompiler.args << '-fsanitize=address'
                        linker.args << '-fsanitize=address'
                    }
                }
            }

            sources.cpp {
                source {
                    srcDir 'src/test'
                    include '**/*.cpp'
                }
                exportedHeaders {
                    srcDir 'src/test'
                    include '**/*.h'
                }
                lib project: ':libs', library: "units", linkage: "api"
                lib project: ':libs', library: "eigen", linkage: "api"
            }
        }
    }
}

task cleanTestTask() {
    doLast {
        delete {
            delete fileTree(dir: new File(project.buildDir, "test-results"), include: ["**/*.png", "**/*.csv"])
        }
    }
}

assemble.finalizedBy cleanTestTask
check.mustRunAfter cleanTestTask
check.finalizedBy plot

wrapper {
    gradleVersion = '4.8.1'
}