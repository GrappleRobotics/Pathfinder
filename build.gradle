plugins {
    id 'com.gradle.build-scan' version '1.16'
    id "org.ysb33r.doxygen" version "0.4" apply false
}

import org.gradle.internal.os.OperatingSystem

task subclean();

allprojects {
    apply plugin: 'idea'
    apply plugin: 'maven-publish'

    project.group = "grpl.pathfinder"
    project.version = "2.0.0-prealpha"

    plugins.withType(CppPlugin).whenPluginAdded {
        project.apply plugin: "visual-studio"
        project.apply plugin: "org.ysb33r.doxygen"
        rootProject.tasks.subclean.dependsOn tasks.clean

        ext.desktopOS = OperatingSystem.current().isWindows() ? "windows" : OperatingSystem.current().isMacOsX() ? "osx" : "linux"
        ext.desktop32Classifier = "${ext.desktopOS}x86"
        ext.desktop64Classifier = "${ext.desktopOS}x86-64"

        project.model {
            buildTypes {
                release
                debug
            }
            platforms {
                "${desktop32Classifier}" {
                    architecture 'x86'
                }
                "${desktop64Classifier}" {
                    architecture 'x86_64'
                }
            }
            toolChains {
                if (System.getenv("CI_COMPILER") != null) {
                    if (System.getenv("CI_COMPILER") == "GCC")
                        gcc(Gcc)
                    else if (System.getenv("CI_COMPILER") == "MSVC")
                        msvc(VisualCpp)
                    else
                        clang(Clang)
                } else {
                    msvc(VisualCpp)
                    // Define Clang first - for ASAN (Default)
                    clang(Clang)
                    gcc(Gcc)
                }
            }
            components {
                withType(TargetedNativeComponent) {
                    targetPlatform ext.desktop32Classifier
                    targetPlatform ext.desktop64Classifier
                }
            }
            binaries {
                withType(NativeBinarySpec) {
                    if (toolChain instanceof Gcc || toolChain instanceof Clang) {
                        cppCompiler.args << '-std=c++14' << '-O2' << '-Werror'

                        if (buildType == buildTypes.debug) {
                            cppCompiler.args "-g"
                        }
                    } else {
                        // MSVC
                        cppCompiler.args << '/std:c++14' << '/O2'

                        if (buildType == buildTypes.debug) {
                            cppCompiler.args << '/Zi' << '/FS'
                            cppCompiler.define 'DEBUG'
                            linker.args '/DEBUG'
                        } 
                    }
                }
            }
        }
        
        ext.binaryDists = []
        ext.binaryArtifacts = { scope, name, jar ->
            binaryDists.each { z -> 
                if (z.binary.component.name == name) {
                    scope.artifact(jar ? z.jartask : z.ziptask) {
                        classifier z.binary.targetPlatform.name
                    }
                }
            }
        }

        project.model {
            binaries {
                withType(NativeBinarySpec) {
                    def bin = it
                    if (buildType.name == "release" && !(it instanceof StaticLibraryBinary)) {
                        def taskSuffix = "${component.name}${targetPlatform.name}"
                        def source = (bin instanceof SharedLibraryBinary ? bin.sharedLibraryFile : bin.executable.file)
                        
                        def ziptask = task "zip${taskSuffix}"(type: Zip) {
                            from(source)
                            into(targetPlatform.name)

                            baseName = component.name
                            classifier = targetPlatform.name

                            dependsOn bin.tasks.withType(AbstractLinkTask)
                        }

                        def jartask = task "jar${taskSuffix}"(type: Jar) {
                            from(source)
                            into(targetPlatform.name)

                            baseName = component.name
                            classifier = targetPlatform.name

                            dependsOn bin.tasks.withType(AbstractLinkTask)
                        }
                        binaryDists << [ binary: bin, jartask: jartask, ziptask: ziptask ]
                    }
                }
            }
        }
    }
    plugins.withType(GoogleTestPlugin).whenPluginAdded {
        model {
            binaries {
                withType(GoogleTestTestSuiteBinarySpec) {
                    lib project: ":libs", library: "googleTest", linkage: "static"
                }
            }
        }
    }

    publishing {
        repositories {
            maven {
                name = "distLocal"
                url = "${rootProject.buildDir}/mvnDistRepo"
            }
        }
        publications.all {
            groupId 'grpl.pathfinder'
        }
    }
}

apply from: 'vendordeps.gradle'

task cleanMaven(type: Delete) {
    delete "$buildDir/mvnDistRepo"
}

task clean(dependsOn: cleanMaven)

buildScan { 
    termsOfServiceUrl = 'https://gradle.com/terms-of-service';
    termsOfServiceAgree = 'yes'
}

wrapper {
    gradleVersion = '4.9'
}