task subclean();

allprojects {
    apply plugin: 'idea'
    plugins.withType(CppPlugin).whenPluginAdded {
        project.apply plugin: "visual-studio"
        rootProject.tasks.subclean.dependsOn tasks.clean

        project.group = "grpl.pathfinder"
        project.version = "2.0.0-prealpha"

        project.model {
            buildTypes {
                release
                debug
            }
            platforms {
                any32 {
                    architecture 'x86'
                }
                any64 {
                    architecture 'x86_64'
                }
            }
            toolChains {
                if (System.getenv("CI_COMPILER") != null) {
                    if (System.getenv("CI_COMPILER") == "GCC")
                        gcc(Gcc)
                    else if (System.getenv("CI_COMPILER") == "MSVC")
                        msvc(VisualCpp)
                    else
                        clang(Clang)
                } else {
                    msvc(VisualCpp)
                    // Define Clang first - for ASAN (Default)
                    clang(Clang)
                    gcc(Gcc)
                }
            }
            binaries {
                withType(NativeBinarySpec) {
                    if (toolChain instanceof Gcc || toolChain instanceof Clang) {
                        cppCompiler.args << '-std=c++14' << '-O2' << '-Werror'

                        if (buildType == buildTypes.debug) {
                            cppCompiler.args "-g"
                        }
                    } else {
                        // MSVC
                        cppCompiler.args << '/std:c++14' << '/O2'

                        if (buildType == buildTypes.debug) {
                            cppCompiler.args << '/Zi' << '/FS'
                            cppCompiler.define 'DEBUG'
                            linker.args '/DEBUG'
                        } 
                    }
                }
            }
        }
    }
    plugins.withType(GoogleTestPlugin).whenPluginAdded {
        model {
            binaries {
                withType(GoogleTestTestSuiteBinarySpec) {
                    lib project: ":libs", library: "googleTest", linkage: "static"
                }
            }
        }
    }
}

buildScan { 
    termsOfServiceUrl = 'https://gradle.com/terms-of-service';
    termsOfServiceAgree = 'yes'
}

wrapper {
    gradleVersion = '4.9'
}