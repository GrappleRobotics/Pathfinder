apply plugin: "cpp"

ext.libroot = new File(rootProject.rootDir, "libs")
ext.gtest_root = new File(libroot, "googletest/googletest")
ext.gbench_root = new File(libroot, "googlebench")
ext.eigen_root = new File(libroot, "eigen")

ext.eigen_version = "3.3.5"
ext.googlebench_version = "1.4.1"
ext.googletest_version = "1.8.1"

model {
    buildTypes {
        release
        debug
    }

    components {
        googleTest(NativeLibrarySpec) {
            sources.cpp {
                source {
                    srcDir new File(gtest_root, "src")
                    include "**/gtest-all.cc"
                }
                exportedHeaders {
                    srcDirs gtest_root, new File(gtest_root, "include")
                    include "**/*.hpp", "**/*.h"
                }
            }
        }

        googleBench(NativeLibrarySpec) {
            binaries.all {
                if (toolChain instanceof GccCompatibleToolChain) {
                    cppCompiler.args << '-std=c++14' << '-Wno-deprecated-declarations'
                    linker.args << '-pthread'
                } else {
                    // MSVC
                    cppCompiler.args << '/std:c++14'
                    linker.args << 'shlwapi.lib'
                }
            }

            sources.cpp {
                source {
                    srcDir new File(gbench_root, "src")
                    include "**/*.cc"
                    exclude "**/benchmark_main.cc"
                }
                exportedHeaders {
                    srcDirs new File(gbench_root, "src"), new File(gbench_root, "include")
                    include "**/*.hpp", "**/*.h"
                }
                lib project: ':libs', library: "googleTest", linkage: "static"
            }
        }

        eigen(NativeLibrarySpec) {
            sources.cpp {
                exportedHeaders {
                    srcDirs eigen_root
                    include "Eigen/**/*"
                }
            }
        }
    }
    // repositories {
    //     libs(PrebuiltLibraries) {
    //         eigen {
    //             headers.srcDir eigen_root
    //             headers.include "**/*"
    //         }
    //     }
    // }
}

task zipEigenHeaders(type: Zip) {
    from fileTree(eigen_root) {
        include "Eigen/**/*"
    }

    baseName = "Eigen"
    classifier = "headers"
    version = eigen_version
}

task zipGoogleTestHeaders(type: Zip) {
    from fileTree(new File(gtest_root, "include")) {
        include "**/*.hpp", "**/*.h"
    }

    baseName = "GTest"
    classifier = "headers"
    version = googletest_version
}

task zipGoogleBenchHeaders(type: Zip) {
    from fileTree(new File(gbench_root, "src")) {
        include "**/*.hpp", "**/*.h"
    }

    from fileTree(new File(gbench_root, "include")) {
        include "**/*.hpp", "**/*.h"
    }

    baseName = "GBench"
    classifier = "headers"
    version = googlebench_version
}

publishing {
    publications {
        eigen(MavenPublication) {
            groupId 'grpl.thirdparty.tuxfamily.eigen'
            artifactId 'Eigen'
            version eigen_version

            artifact zipEigenHeaders {
                classifier 'headers'
            }
        }
        googleBench(MavenPublication) {
            groupId 'grpl.thirdparty.google.test'
            artifactId 'GoogleBench'
            version googlebench_version

            artifact zipGoogleBenchHeaders {
                classifier 'headers'
            }

            binaryArtifacts(it, 'googleBench', false)
        }
        googleTest(MavenPublication) {
            groupId 'grpl.thirdparty.google.test'
            artifactId 'GoogleTest'
            version googlebench_version

            artifact zipGoogleTestHeaders {
                classifier 'headers'
            }

            binaryArtifacts(it, 'googleTest', false)
        }
    }
}